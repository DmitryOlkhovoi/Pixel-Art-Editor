{"version":3,"sources":["Canvas.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Canvas","color","canvasRef","useRef","useState","lastPixel","setLastPixel","context","current","getContext","getCoordinates","e","rect","getBoundingClientRect","x","clientX","left","y","clientY","top","Math","floor","fillPixel","fillStyle","fillRect","ref","onMouseDown","onMouseMove","pixel","pixels","forEach","fillPixels","bresenham","onMouseUp","width","height","App","setColor","className","onChange","colorResult","hex","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4PAgEeA,EAtDW,SAAC,GAAe,IAAD,EAAZC,EAAY,EAAZA,MACrBC,EAAYC,iBAA0B,MADL,EAELC,qBAFK,mBAEhCC,EAFgC,KAErBC,EAFqB,KAGjCC,EAAO,UAAGL,EAAUM,eAAb,aAAG,EAAmBC,WAAW,MAE9C,SAASC,EAAeC,GACtB,IAAMC,EAAOV,EAAUM,QAASK,wBAC1BC,EAAIH,EAAEI,QAAUH,EAAKI,KACrBC,EAAIN,EAAEO,QAAUN,EAAKO,IAC3B,MAAO,CAACC,KAAKC,MAAMP,EAAI,GAAIM,KAAKC,MAAMJ,EAAI,IA4B5C,SAASK,EAAT,GAAmC,IAAdR,EAAa,EAAbA,EAAGG,EAAU,EAAVA,EACtBV,EAASgB,UAAYtB,EACrBM,EAASiB,SAASV,EAAGG,EAAG,EAAG,GAG7B,OACE,wBACEQ,IAAKvB,EACLwB,YAjCJ,SAAqBf,GACnBL,EAAaI,EAAeC,KAiC1BgB,YA9BJ,SAAqBhB,GACnB,GAAKN,EAAL,CAIA,IAAMuB,EAAQlB,EAAeC,IAY/B,SAAoBkB,GAClBA,EAAOC,QAAQR,GAVfS,CAFeC,IAAU3B,EAAW,GAAIA,EAAW,GAAIuB,EAAM,GAAIA,EAAM,KAGvEtB,EAAasB,KAsBXK,UAnBJ,WACEX,EAAU,CAAER,EAAGT,EAAW,GAAIY,EAAGZ,EAAW,KAC5CC,OAAa,IAkBX4B,MAAM,MACNC,OAAO,SChCEC,MArBf,WAAgB,IAAD,EACahC,mBAA6B,WAD1C,mBACNH,EADM,KACCoC,EADD,KAGb,OACE,sBAAKC,UAAU,MAAf,UACE,qBAAKA,UAAU,MAAf,oBACA,sBAAKA,UAAU,SAAf,UACE,qBAAKA,UAAU,iBAAf,SACE,cAAC,EAAD,CAAQrC,MAAOA,MAEjB,qBAAKqC,UAAU,cAAf,SACE,cAAC,IAAD,CACErC,MAAOA,EACPsC,SAAU,SAACC,GAAD,OAAiBH,EAASG,EAAYC,iBCL7CC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.b414c602.chunk.js","sourcesContent":["import React, { FC, MouseEvent, useEffect, useRef, useState } from \"react\";\nimport bresenham from \"bresenham\";\nimport logo from \"./logo.svg\";\nimport \"./Canvas.css\";\nimport { ColorResult } from \"react-color\";\n\nexport interface Props {\n  color: ColorResult[\"hex\"];\n}\n\nconst Canvas: FC<Props> = ({ color }) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const [lastPixel, setLastPixel] = useState<number[]>();\n  const context = canvasRef.current?.getContext(\"2d\");\n\n  function getCoordinates(e: any) {\n    const rect = canvasRef.current!.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n    return [Math.floor(x / 5), Math.floor(y / 5)];\n  }\n\n  function onMouseDown(e: MouseEvent) {\n    setLastPixel(getCoordinates(e));\n  }\n\n  function onMouseMove(e: MouseEvent) {\n    if (!lastPixel) {\n      return;\n    }\n\n    const pixel = getCoordinates(e);\n    const pixels = bresenham(lastPixel![0], lastPixel![1], pixel[0], pixel[1]);\n\n    fillPixels(pixels);\n    setLastPixel(pixel);\n  }\n\n  function onMouseUp() {\n    fillPixel({ x: lastPixel![0], y: lastPixel![1] });\n    setLastPixel(void 0);\n  }\n\n  function fillPixels(pixels: any) {\n    pixels.forEach(fillPixel);\n  }\n\n  function fillPixel({ x, y }: any) {\n    context!.fillStyle = color;\n    context!.fillRect(x, y, 1, 1);\n  }\n\n  return (\n    <canvas\n      ref={canvasRef}\n      onMouseDown={onMouseDown}\n      onMouseMove={onMouseMove}\n      onMouseUp={onMouseUp}\n      width=\"100\"\n      height=\"100\"\n    ></canvas>\n  );\n};\n\nexport default Canvas;\n","import React, { useState } from \"react\";\nimport { ColorResult, SketchPicker } from \"react-color\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Canvas from \"./Canvas\";\n\nfunction App() {\n  const [color, setColor] = useState<ColorResult[\"hex\"]>(\"#000000\");\n\n  return (\n    <div className=\"app\">\n      <nav className=\"top\">Pixart</nav>\n      <div className=\"app-ui\">\n        <div className=\"canvas-wrapper\">\n          <Canvas color={color}></Canvas>\n        </div>\n        <div className=\"right-panel\">\n          <SketchPicker\n            color={color}\n            onChange={(colorResult) => setColor(colorResult.hex)}\n          ></SketchPicker>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}